const express = require("express");
const Replicate = require("replicate");
const router = express.Router();

const replicate = new Replicate({
  auth: process.env.REPLICATE_API_TOKEN,
});

router.post("/", async (req, res) => {
  try {
    const {
      model,
      lora_scale,
      num_outputs,
      aspect_ratio,
      output_format,
      guidance_scale,
      output_quality,
      num_inference_steps,
      prompt,
      hf_loras,
      lora_types,
      version,
      category,
    } = req.body;

    let updatedHfLoras = hf_loras || [];

    if (lora_types) {
      switch (lora_types) {
        case "1":
          updatedHfLoras.push(
            "https://replicate.delivery/yhqm/fyrjwUX3RPTHSiUcLWzIOLXymSfVRb2gDQfxKfIXSQXtelybC/trained_model.tar"
          );
          break;
        case "2":
          updatedHfLoras.push(
            "https://replicate.delivery/yhqm/J3KW8LUHNTLDLRtYI1476C1tzcVKjSjt5tXeRODFV96xmguJA/trained_model.tar"
          );
          break;
        case "3":
          updatedHfLoras.push(
            "https://replicate.delivery/yhqm/HFSA8EXLG5rkAJn7v9ETkJhybZO5mcwDXJN3sqs0J28r1O3E/trained_model.tar"
          );
          break;
        case "4":
          updatedHfLoras.push(
            "https://replicate.delivery/yhqm/lzufr9Pk1LzSFiOOscQG5AOMeKgsNSV4Zf96lhHafq28lC4NB/trained_model.tar"
          );
          break;
        default:
          break;
      }
    }

    // Modify the prompt
    let modifiedPrompt = prompt || "";

    const lastPrompt =
      "The background should be pure white, mimicking the clean, professional look often seen in high-end e-commerce product photography. Underneath the earring, there should be a soft, subtle shadow to ground the image and provide a sense of dimension. Finally, the entire piece should have a slight 3D rendered effect, with soft highlights and reflections that accentuate the textures and intricate details of the earring, ensuring it stands out beautifully against the backdrop";

    // Add 'a photo of TOK' at the beginning
    modifiedPrompt = `a photo of TOK ${modifiedPrompt}`;

    // If category is 'jewelry', append the specific style
    if (category === "jewelry") {
      switch (lora_types) {
        case "1":
          modifiedPrompt += ` ${lastPrompt}, in style of RNGST`;
          break;
        case "2":
          modifiedPrompt +=
            modifiedPrompt += ` ${lastPrompt}, in style of NECKV`;

          break;
        case "3":
          modifiedPrompt +=
            modifiedPrompt += ` ${lastPrompt}, in style of EASTY`;

          break;
        case "4":
          modifiedPrompt += modifiedPrompt += ` ${lastPrompt}, in style of BRC`;
          break;
        default:
          break;
      }
    }

    const output = await replicate.run(version, {
      input: {
        prompt: modifiedPrompt,
        hf_loras: updatedHfLoras,
        lora_scale: lora_scale || 0.8,
        num_outputs: num_outputs || 1,
        aspect_ratio: aspect_ratio || "1:1",
        output_format: output_format || "webp",
        guidance_scale: guidance_scale || 3.5,
        output_quality: output_quality || 100,
        num_inference_steps: num_inference_steps || 50,
        disable_safety_checker: true,
      },
    });

    res.json({ success: true, output });
    console.log("Output generated:", output);
  } catch (error) {
    console.error("Error running replicate model:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

module.exports = router;
